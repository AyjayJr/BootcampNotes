== Asynchronous JavaScript ==

The Call Stack
---
Mechanism the interpreter uses to keep track of its place in a script
that calls multiple functions.
How JS knows what function is being run and where it was called from.
Stack is a last in first out data structure.
How it works:
- When a function is called the interpreter adds it to the call stack.
- Any functions that are called by that function are added to the call stack further up.
- When the current function is finished, the interpreter takes it off the stack
and resumes execution where it left off in the last code listing.
Chrome debugger is a good tool for visualizing the call stack.
Find debugger in the sources tab of chrome dev tools.

WebAPIs & Single Threadedness
---
Single thread means JS is running at most one line of code at a time.
Although this is the case JS leverages the browser to handle certain tasks for it.
Browsers come with Web APIs that are able to handle certain tasks in the background.
e.g. making requests or setTimeout
The call stack reacognizes these web api functions and passes them off to the browser.
Once the browser finishes these tasks they return and are pushed onto the stack.

Callback Hell
---
Lots of times we want one action to happen and then have another action happen only once
the first action is done.
This can be done through nesting or by including a callback to the function you want to happen
after second within the first function.
This is very common when dealing when dealing with APIs and server requests.

Promises
---
An object that represents the eventual completion or failure of an async operation.
Promises can have three states, pending, resolved, or rejected.
This allows you to run code whether the promise has been resolved or rejected.
You do this by attaching callbacks to the promise itself.
Syntax:
request
   .then(() => {
   console.log('resolved')'
   })
   .catch(() => {
   console.log('rejected');
   })
If the promise is resolved the then callback runs, otherwise catch callback runs.
The power of promises is that you can chain thens together and use a single catch for all of them.
To chain thens you need to return the promise value within the then callback functions.
This reduces nesting and avoids callback hell.
Creating a Promise:
new Promise((resolve, reject) => {
   if (something good) {
      resolve();
   } else {
      reject();
   }
})
If at any point you call resolve that promise will be resolved and the same for reject.

Async Functions
---
A newer syntax for working with async code, syntax sugar for promises.
Async and Await are the two main keywords.
The async keyword signifies that a function is asynchronous and will always return a promise.
If an async function returns a value then the promise will be resolved with that value.
To reject the promise you have to throw an error using throw keyword.
The await keyword will wait for a promise to be resolved before continuing execution.
Use this to pause execution untill after a promise has been resolved.
This removes the need to use then().
To reject promises in an async function you have to use try and catch.