== Ajax and APIs ==
AJAX stands for: 
- Asynchronous 
- JavaScript
- And
- XML
It refers to making requests behind the scenes after the page has already been loaded.
When we are making requests with JavaScript we are usually just looking for data.
Even though the X stands for XML we almost always use JSON.

API stands for:
- Application
- Programming 
- Interface 
A broad term that refers to an interface that allows one piece of software to interact
with another piece of software.
A web API is an API that is web based.
They are end points left exposed to respond to requests with information for software to consume.


JSON
---
Stands for:
- Java
- Script
- Object
- Notation
A way of format for data that is consistent and predictable.
Based on JavaScript objects and object notation.
Has Key and Value pairs.
You can parse JSON in other languages like python/ruby. 
JavaScript has a built-in function to turn JSON into valid JavaScript, JSON.parse().
To turn a JS object into valid JSON use JSON.stringify().

Postman
---
Postman doesn't do anything that we couldn't already do,
But it is a great tool get for making API requests.
Used for test APIs that you haven't and haven't created.
There are many HTTP verbs signifying different types of requests.

Get Requests
---
Sending GET requests to some url will yield some data.
This data comes in multiple packets of information such as:
- The body is the data we requested from the API.
  > A webpage body will yield html/css/js
  > An endpoint will deliver data for interaction between systems.
- The status codes represent the following: 
  > Codes starting with 2 are successful codes.
  > Codes starting with 3 are redirect codes.
  > Codes starting with 4 are client side error codes.
  > Codes starting with 5 are server side error codes. 
   + You can view these codes in postman or browser dev tools network tab.
- The headers are basically the metadata for the request.
- e.g.
  > Content Type
  > Date accessed
  > Last modified
  > Server type

Query Strings & Headers
---
Query strings are information we can provide as part of a URL that will impact what we get back.
They are represented as key/value pairs.
APIs expect certain key/value pairs to be passed to it.
They use the syntax "?{varName}=:shows"
There can be multiple fields that we are searching for.
Postman allows use to enter params as a key/value pair and it will build query string for you.
Headers not only are recieved from requests, we can set headers on our own requests.
Headers may signify what content type you want in return among other things.

Making XMR
---
XML Http Request
Horrible, original way of doing it.
Does not support promises.
First you must create a new XMLHttpRequest object.
Then you must attach callback functions to the .onload and .onerror properties.
Lastly you .open() your request and .send().
The response data will then be attached to the XMLHttpRequest object.
Newer options include fetch.

Fetch API
---
Newer way of making requests.
Supports promises so we don't have to worry about callbacks.
Fetch returns a promise containing things like headers, status codes, etc.
When the promise gets returned it will be resolved for existing endpoints
and rejected if you request a non existent endpoint.
From there you can chain on .then() to run when resolved and .catch() to
run when rejected.
One caveat about fetch is that it resloves once the headers come back you
don't necessarily have the data yet.
To access data you must attach .json() method to be resolved.
.json() returns a promise as well.
Writing fetch in an asynchronous further helps to simplify the process.
Wrap async code in try and catch to catch errors.

Axios
---
Axios is a library built over fetch that further improves the syntax of
making http requests.
Easiest way to incorporate Axios is through cdn link.
axios.get returns a promise that is only resolved once all data arrives.
The data is already parsed within the returned promise.

Setting Headers
---
When we make a GET request sometimes we want to specify that we only want
a certain type of data whether it be json or html.
In axios.get() there's a second argument you can pass in with config info.
The second arg should be an object that specifies certain info.