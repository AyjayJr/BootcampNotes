== Introduction to Databases ==

Why use a database?
---
Databases can handle large amounts of data efficiently.
Provide easy tools for CRUD operations.
Security and access control over data (DBMS).
Generally scale well.

SQL vs. NoSQL
---
SQL = Structured Query Language.
SQL dbs are Relational Databases.
Each table references each other.
Pre-defined schema for data.
Everything must conform to a pattern.
NoSQL = No query language
Very diverse category of databases.
No pre-defined schema for data.
A lot more flexibility for data storage.

Why use MongoDB?
---
Mongo is commonly used with node and express MEAN/MERN stack.
Easy to get started.
Pairs particularly well with JavaScript.
Popularity means there is a strong dev community.

BSON?
---
BSON stands for Binary JSON.
BSON was invented to optimize JSON for speed and space.
We can write regular JSON but mongo will store as BSON.

Inserting with Mongo (C)
---
Insertion in Mongo inserts data into a collection.
This is a way to categorize and group similar data together
db.collection.insertOne() to insert one object into a collection of your choosing.
If the collection doesn't exist mongo will automatically create it.
e.g. db.dogs.insertOne() will create and insert into a dogs collection.
e.g. db.dogs.insertOne({name: "Charlie", age: 3, breed: "Corgi", catFriendly: true})
When inserted mongo auto generates a primary key called "_id".
insertMany() will take an array of objects.
insert() will take either an array of objects or a single object.

Querying with Mongo (R)
---
Used to find relevant data within the db.
db.collection.find() w no args will return all data within a collection.
Pass in an object with a key/value pair to find objects that match that key/value.
db.collection.find({breed: "corgi"}) will return objects that match corgi breed.
findOne() will return exactly one document that matches your args.
You can also pass in some logic with find but we will get back to that later.

Updating with Mongo (U)
---
Update is usually most annoying.
Takes two steps, find thing to update, how we want to update.
updateOne()/updateMany() work the same as their find counterparts.
Update has 2 arguments first what to find then how to update.
eg. updateOne({name: "Charlie"}, <operator>: {<field>: <value>,...})
Update operators such as $set, $rename, etc. will determine how to update.

Deleting with Mongo (D)
---
Two delete methods, deleteOne() and deleteMany().
Similar to the syntax of the find methods.
Takes an object that specifies a match of one of the documents in the collection.
If you pass an empty object to deleteMany() it will delete everything.

Additional Operators
---
Sometimes you want to use logic in your functions.
Some objects may be nested within other objects, use . operator to access.
Things like find all dogs over the age of 5 need to use $gt, $lt, $gte, $lte.
Use with the syntax { age: { $gte: 5 }}.
Notice you nest the operator within it's own object.
$in is a useful operator that matches based on an array of values.
e.g. db.dogs.find({ age: { $in: [5, 6, 7, 8] }})
The above example will find objects that have an age of 5, 6, 7, or 8.
You can use multiple operators at the same time as well.
e.g. db.dogs.find({ age: { $gte: 5}, breed: {$in: ["Chihuahua, "Corgi"] }})
This will find all dogs greater than or equal to five that are chihuahuas or corgis.
